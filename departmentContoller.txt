package com.ibm.springboot.demo.controller;

import java.util.List;


import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ibm.springboot.demo.model.Department;
import com.ibm.springboot.demo.model.Employee;
import com.ibm.springboot.demo.service.DepartmentService;

@RestController
@RequestMapping("dept")

public class DepartmentController {

	@Autowired
	DepartmentService departmentService;

	@GetMapping("get-all-depts")
	public ResponseEntity<List<Department>> getAllDepts() {
		List<Department> depList = departmentService.getAllDepartments();
		depList.forEach(System.out::println);
		HttpStatus status = HttpStatus.OK;
		HttpHeaders headers = new HttpHeaders();
		headers.add("message", "All departments data fetched successfully!");
		ResponseEntity<List<Department>> response = new ResponseEntity<List<Department>>(depList, headers, status);
		return response;
	}
	
	
	@GetMapping("get-dept-by-id/{did}")
	public ResponseEntity<Department> getDepByDId(@PathVariable(name = "did") String departmentId) {
		System.out.println(departmentId);
		Department department = departmentService.getDepartmentById(departmentId);
		System.out.println(department.toString());
		HttpStatus status = HttpStatus.OK;
		HttpHeaders headers = new HttpHeaders();
		headers.add("message","Department data fetched successfully");
		ResponseEntity<Department> response = new ResponseEntity<Department>(department,headers,status);
		return response;
	}
	@PostMapping("add-dept")
	public ResponseEntity<Department> addDept(@RequestBody Department department) {
		Department deptToBeAdded = departmentService.addDepartment(department);
		HttpStatus status = HttpStatus.OK;
		HttpHeaders headers = new HttpHeaders();
		headers.add("message", "Department added successfully!");
		ResponseEntity<Department> response = new ResponseEntity<Department>(deptToBeAdded, headers, status);
		return response;
	}
	
	@DeleteMapping("delete-dept/{did}")
	public ResponseEntity<Department> deleteDept(@PathVariable(name = "did") String departmentId) {
		Department deptToBeDeleted = departmentService.deleteDepartment(departmentId);
		HttpStatus status = HttpStatus.OK;
		HttpHeaders headers = new HttpHeaders();
		headers.add("message", "Department added successfully!");
		ResponseEntity<Department> response = new ResponseEntity<Department>(deptToBeDeleted, headers, status);
		return response;
	}
	
//	@GetMapping("get-dept-by-name/{dname}")
//	public ResponseEntity<List<Department>> getDeptName(@PathVariable(name = "dname") String departmentName) {
//		List<Department> deptList = departmentService.getDepartmentByName(departmentName);
//		HttpStatus status = HttpStatus.OK;
//		HttpHeaders headers = new HttpHeaders();
//		headers.add("message", "Department data fetched successfully!");
//		ResponseEntity<List<Department>> response = new ResponseEntity<List<Department>>(deptList, headers, status);
//		return response;
//	}

}





///DEPARTMENT SERVICE IMPLEMENTS--------------------------------------------------------------------------
package com.ibm.springboot.demo.service;

import java.util.List;
import java.util.Optional;

import org.bson.types.ObjectId;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ibm.springboot.demo.exception.DepartmentNotFoundException;
import com.ibm.springboot.demo.exception.EmployeeNotFoundException;
import com.ibm.springboot.demo.model.Department;
import com.ibm.springboot.demo.model.Employee;
import com.ibm.springboot.demo.repository.DepartmentRepository;

@Service
public class DepartmentServicelmpl implements DepartmentService{

	private final Logger LOG=LoggerFactory.getLogger(this.getClass());	
	
	@Autowired
	DepartmentRepository departmentRepository;
	
	@Override
	public List<Department> getAllDepartments() {
		// TODO Auto-generated method stub
		
		LOG.info("getAllDept");
		List<Department> depList=departmentRepository.findAll();
		// what if the collection is empty ?
//		return employeeRepository.findAll();
		if(depList.isEmpty()) {
			String errorMessage = "The department list is empty";
			LOG.warn(errorMessage);
			throw new DepartmentNotFoundException(errorMessage);
		}
		else {
			return depList;
		}
		
//		LOG.info("getAllDepartment");
//		return departmentRepository.findAll();
	}
	
	@Override
	public Department getDepartmentById(String departmentId) {
//		// TODO Auto-generated method stub
//		LOG.info(departmentId.toString());
//		return departmentRepository.findById(departmentId).get();
		
		Optional<Department> depOptional = departmentRepository.findById(departmentId);
		if (depOptional.isEmpty()) {
			String errorMessage = "department with the id " + departmentId + " is not found!";
			LOG.warn(errorMessage);
			throw new DepartmentNotFoundException(errorMessage);
		} else
			return depOptional.get();
	}

	@Override
	public Department addDepartment(Department department) {
		LOG.info(department.toString());
		Department managerOptional = departmentRepository.findByManagerId(department.getManagerId());
		if(managerOptional != null) {
			String errorMessage = "Department already exist with the same manager";
			LOG.warn(errorMessage);
			throw new DepartmentNotFoundException(errorMessage);
			
		}else {
			return departmentRepository.save(department);
		}
		
		
	
	
	}

	@Override
	public Department deleteDepartment(String departmentId) {
		LOG.info(departmentId);
		Department deptToBeDeleted= this.getDepartmentById(departmentId);
		if(deptToBeDeleted == null) {
			String errorMessage = "Department not foundr";
			LOG.warn(errorMessage);
			throw new DepartmentNotFoundException(errorMessage);
		}
		else {
			departmentRepository.deleteById(departmentId);
			LOG.info("Department with departmentId: " + departmentId + " has been deleted");
			return deptToBeDeleted;
		}
		
	
	}



	

}


Java Spring boot mail service--------------------------------------------------------------------------------------------------
//EmailService
package com.ibm.springboot.demo.mail;

import org.apache.commons.logging.Log;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

//@Service
//
//public class EmailService {
//
//	@Autowired
//	private JavaMailSender javaMailSender;
//	
//	
//	public void sendEmail(String to,String subject, String body) {
//		try {
//			
//			SimpleMailMessage mail = new SimpleMailMessage();
//			mail.setTo(to);
//			mail.setSubject(subject);
//			mail.setText(body);
//			
//		}
//		catch(Exception e) {
//			
//			System.out.println("Exception while sending a Mail...." + e);
//			
//		}
//	}
//}








@Service
public class EmailService {
@Autowired	
private final JavaMailSender mailSender;

public EmailService(JavaMailSender mailSender) {
	this.mailSender = mailSender;
	
}





@Async
public void sendEmail(String to,String subject, String body) {
	SimpleMailMessage message = new SimpleMailMessage();
	message.setTo(to);
	message.setFrom("sameerafzalkhan777@gmail.com");
	message.setSubject(subject);
	message.setText(body);
	
	mailSender.send(message);
}




}

//App.java---------------------------------------------------
package com.ibm.springboot.demo.mail;

import org.apache.commons.logging.Log;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

//@Service
//
//public class EmailService {
//
//	@Autowired
//	private JavaMailSender javaMailSender;
//	
//	
//	public void sendEmail(String to,String subject, String body) {
//		try {
//			
//			SimpleMailMessage mail = new SimpleMailMessage();
//			mail.setTo(to);
//			mail.setSubject(subject);
//			mail.setText(body);
//			
//		}
//		catch(Exception e) {
//			
//			System.out.println("Exception while sending a Mail...." + e);
//			
//		}
//	}
//}








@Service
public class EmailService {
@Autowired	
private final JavaMailSender mailSender;

public EmailService(JavaMailSender mailSender) {
	this.mailSender = mailSender;
	
}





@Async
public void sendEmail(String to,String subject, String body) {
	SimpleMailMessage message = new SimpleMailMessage();
	message.setTo(to);
	message.setFrom("sameerafzalkhan777@gmail.com");
	message.setSubject(subject);
	message.setText(body);
	
	mailSender.send(message);
}




}
